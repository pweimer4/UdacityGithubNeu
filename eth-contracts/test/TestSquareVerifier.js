// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require("Verifier");

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    let proof = {
      a: [
        "0x06c36c166eeb32a537ff96e81894bacede971f3de6ba84024ae7711d79d5fd0c",
        "0x06c36c166eeb32a537ff96e81894bacede971f3de6ba84024ae7711d79d5fd0c"
      ],
      b: [
        [
          "0x2d7a34aa7cb91517493e4b87aa1b12230e91fdec6948c3701f3ad7de4ca7bcf4",
          "0x2f82215195df2ea8b9b4f35bff132a046d49ef458ba98470f99fc3799a74b54d"
        ],
        [
          "0x2181775fb1d0def6a4e45df1d68d82bd60d525d141e1eb5d789d1cd29fc34ff3",
          "0x07d3de7806015ac9a19aa3d3ef3e15cbd5f2071b50a97a95b269d148c0e970af"
        ]
      ],
      c: [
        "0x200c3356c4963ed6a04da0e7c9507812030e3de76000c1edd961040f7f85f922",
        "0x05e01bdbe1d69ccbb7b8db301a8571e850d55494e09ad4d69de173d950acb326"
      ],
    input: ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"]
    }

    describe('testing Verifier', function () { 
        beforeEach(async function () {
            this.contract = await SquareVerifier.new({
                from: account_one
            });

        })

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('with correct proof', async function () {

            let result = await this.contract.verifyTx(proof.a, proof.b, proof.c, proof.input)

            assert.equal(result, true, "Proof is not working")
        })

        // Test verification with incorrect proof
        it('with incorrect proof', async function () {

            let result = await this.contract.verifyTx(proof.a, proof.b, proof.c, [9,0])

            assert.equal(result, false, "Proof is not be working");
        })

    });
})